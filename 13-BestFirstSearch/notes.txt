------------------------------------TREES---------------------------------------
- specification of a graph
  - a graph is a collection of nodes and edges
    - nodes sometimes called vertices
    - a node holds stuff, an edge connects nodes
------------------------------EXAMPLES OF GRAPHS--------------------------------
o - this is a graph
o o - this is a graph

o-o - this is a connected component

o-o o - this is a graph with 2 components

o-o
 \  - this is a fully connected graph (the nodes are all connected)
  o

o-3-o
7\ /2 - this is a weighted graph (each of the edges has a value) (there is a 
  o   	cost associated with each of the edges)

o---o
 \ /  - this is a cycle (you can get from a node back to itself)
  o   - you can have several cycles in a graph

o---o
|\ /|
| X | - this graph has several cycles in it
|/ \|
o---o

o->o
| ^   - this is a directed graph (you can go one way but not the other in this
V/      case
o

o<-->o
^
|      - this is also a directed graph
v
o
--------------------------------WHAT IS A TREE?---------------------------------
- a tree is an acyclic graph with one node designated as the root
- a tree is either empty or has one or more nodes
  - each node can have 0 or more children and one node is designated as the root

  o o
   \|\
o---o o---o
|   | |       - this is TECHNICALLY a tree
o   o o---o
     / \   \
    o   o   o

to facilitate things, trees are typically shown top down or left to right
     o                   o   o---o
    / \                 /   /
   o   o               o---o---o
  / \   \               \   \ 
 o   o   o               o   o---o

root - starting node
child - node parent node leads to
 - siblings come from the same parent node
parent - node connecting to child nodes
leaf - node with no children
ancestors - any nodes down the path from n to the root
descendents - children, their children, etc
path - follows nodes down
height - the length of the longest root to leaf path

         T--> 0        - 0 is the root, 0 is an ancestor of A
             / \
            1   2      - 2 is a leaf, 1&2 are children of 0
           / \
          3   4	       - 3&4 are siblings, 4 is the parent of 5&6
             / \
            5   6      - 6 is part of the path from the root to A
           /|\   \
          7 8 9   A    - A is a descendent of 0
           / \   / \
          B   C D   E  - the height of the tree is 5

a tree is full if it has 0 or the maximum number of allowed children
- i.e. if you restrict the number of children per node to 4 children, the tree
  is full if the nodes are all leaves or all have 4 children
----------------------------------BINARY TREES----------------------------------
- each node has a leaf or has one or two children
  - typically, the children are referred to as the left or right child
-----------------------------------4.23.15--------------------------------------
                     20		  everything to the left of the root is less
                    /  \	  than the root. Everything to the right of the	
                   /    \	  root is greater than the root. This holds true
                 10      40	  for all parent nodes in this tree. This is a
                /  \    /  \	  binary search tree. This means that given any
               /    \ 31    70	  value with value v, all the nodes in the left
              7      13    /	  subtree have values < v and all nodes in the  
             / \       \  62	  right subtree has values > v.
            3   8       16  \
                             50
                            /
                          55
the actual internal structure of the tree is most like the doubly linked list

public class Node{
private int data
private Node left, right
get and set and constructors
}

public class Tree{
}

Node Search(Node T, Integer i){
  while(T!=null){
  int c = T.getData().compareTo(i);
  if (c>0){
    T=T.getRight();
  }
  else c(<0)}
    T =T.getLeft();
  }
}

insert(Node n)
  if (T==null){
    print T to the ndoe you're inserting
  } else{
    //insert as a new leaf
    Node n = new Node();
    search for the value of n but use a piggyback pointer
    when lead pointer (T) gets to null, then piggyback (T2) will be at the node
    before the insertion point
    insert new node to left or right of T2 as appropriate
}
