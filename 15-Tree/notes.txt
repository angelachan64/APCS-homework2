-------------------------------------HEAPS--------------------------------------
1. convert to heap - O(n)
2. heap sort ------- O(nlogn)
heap - everything underneath the root is either bigger or smaller
- min heap or max heap
Node n
- left child is at 2n
- right child is at 2n+1
looking at it as if it's a tree, but it's an array
can be used to find medians
- 2 heaps, one max one min
  - median is always top of max heap or top of min heap if the two are the same
    size
-----------------------------------ASSIGNMENT-----------------------------------
write class heap
- push down
- heap sort
  - builds array, sorts itself
- don't need sift up
- find min -- O(1)
- insert ---- O(logn)
- removemin - O(logn)
- reducekey
  1. finds node
  2. adjusts value (priority)
  3. push down or sift up
