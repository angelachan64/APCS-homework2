-------------------------------------HEAPS--------------------------------------
1. convert to heap - O(n)
2. heap sort ------- O(nlogn)
heap - everything underneath the root is either bigger or smaller
- min heap or max heap
Node n
- left child is at 2n
- right child is at 2n+1
looking at it as if it's a tree, but it's an array
can be used to find medians
- 2 heaps, one max one min
  - median is always top of max heap or top of min heap if the two are the same
    size
-----------------------------------ASSIGNMENT-----------------------------------
write class heap
- push down
- heap sort
  - builds array, sorts itself
- don't need sift up
- find min -- O(1)
- insert ---- O(logn)
- removemin - O(logn)
- reducekey
  1. finds node
  2. adjusts value (priority)
  3. push down or sift up
-------------------------------ANOTHER ASSIGNMENT-------------------------------
You want to store all info on stuy students in a data structure
you want to optimize for:
  1. Finding a student based on 4-digit ID
  2. Adding a student by 4-digit ID
  3. Changing a student (found by 4-digit ID)
you DO NOT care about:
  1. comparing students
  2. printing out all students
  3. COULD add delete function, not necessary
------------------------------HASHING/HASH TABLES-------------------------------
looking something up is in constant time - array index
- come up with mapping or function
  - takes unique value and converts it into an index in an array
    - put everything in a slot even if it doesn't work perfectly
we want to store things in a table by index (array)
we have to take a unique ID and convert it into a table index to store it
- we would use a hash function for this
  - hash function h(x) is a mapping function
    - takes a piece of information and converts it into an index in our hash
      table (right now, an array)
FOR EXAMPLE:
- OSIS numbers
  - h(x) = x%10,000 : converts OSIS into a 4-digit index
  - h(x) = multiply or add all non-zero digits of x, %10,000
PROBLEM:
- multiple objects can hash to the same slot/index
  - clash/collision
DEALT WITH BY:
- hash table array has to be sufficiently large (sparsely populated)
  - avoid collision because there are more places to put things
- hash function should do a good job distributing items in the table
EXAMPLE:
int hash(String s){
   h = 1;
   for (i=0 to s.length){
      h = h*11 + int(s.charAt(i));
   }
   return h%tablesize;
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
CLOSED HASHING:
- everything is stored in the array
- if we have a collision:
  - rehashing (with a secondary hash function)
    - problem: what if there's something at the second hash function?
    - problem: more work to do in terms of deciding whether item is what you're
      searching for or something that was there before a rehash
  - linear probing (put item in next slot)
    - problem: if not at the slot it's supposed to be, have to scan down until
      next empty slot
    - problem: if delete one that created a collision, what do you do with the
      rest of the items that were supposed to be in that space?
  - leave space in table using a multiplier
    - EXAMPLE:
      h(x) = (x%100)*3 - leaves 2 extra spaces for collision
    - problem: definitely wastes space, but hash table is supposed to waste
      space
    - spreads items out so you have enough space in your table
insert - if done right, should get constant time unless it has collisions, then
       	 pretty close to constant time
retrieval - same as insert, expected constant time (unless collision, then close
	 to constant time)
OPEN HASHING:
- each array element is a pointer to a linked list of values that hash to that
  element
- add elements to the left of the linked list (at beginning)
insert - always constant time O(1)
retrieval - EXPECTED constant time but O(n) with respect to the length n of
	 linked list at the current location
